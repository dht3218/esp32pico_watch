// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.0
// LVGL version: 8.3.11
// Project name: dht8-3

#include "ui.h"
#include <string>
#include "user_led.h"
#include "clock.h"
#include "Wifitask.h"
#include <Arduino.h>
#include "AisassistantWeb.h"
using std::string;

void getTWifi(lv_event_t* e) {
  // Your code here
  RtcgetTwifi();
  int H = 0;
  int M = 0;
  int S = 0;
  getTc(&H, &M, &S);
  timeset[0] = H / 10;
  string Ttemp = std::__cxx11::to_string(timeset[0]);
  lv_label_set_text(ui_hour0label, Ttemp.c_str());
  timeset[1] = H - 10 * timeset[0];
  Ttemp = std::__cxx11::to_string(timeset[1]);
  lv_label_set_text(ui_hour1label, Ttemp.c_str());
  timeset[2] = M / 10;
  Ttemp = std::__cxx11::to_string(timeset[2]);
  lv_label_set_text(ui_min0label, Ttemp.c_str());
  timeset[3] = M - 10 * timeset[2];
  Ttemp = std::__cxx11::to_string(timeset[3]);
  lv_label_set_text(ui_min1label, Ttemp.c_str());
}

void SetClock(lv_event_t* e) {
  RtcSetTime(timeset[0], timeset[1], timeset[2], timeset[3]);
  // Your code here
}

void Wifistart(lv_event_t* e) {

  lv_label_set_text(ui_WIFItext, " WIFI:...");

  // Your code here
  // Connect to WiFi
  if (Wificheck() == 0) {
    if (Wificonnect("dht", "12345678")) {
      wifistatu = 1;
      lv_label_set_text(ui_WIFItext, " WIFI:已连接");
      lv_obj_add_state(ui_WIFIKEY, LV_STATE_CHECKED);  // 开

    } else {
      lv_label_set_text(ui_WIFItext, " WIFI:连接失败");
      lv_obj_clear_state(ui_WIFIKEY, LV_STATE_CHECKED);  // 关

      Wificlose();
    }
  } else {
    wifistatu = 0;
    Wificlose();
    lv_label_set_text(ui_WIFItext, " WIFI:未连接");
    lv_obj_clear_state(ui_WIFIKEY, LV_STATE_CHECKED);  // 关
  }
  vTaskDelay(500);
}

void SettingStart(lv_event_t* e) {
  // Your code here
}

void gotuofunc(lv_event_t* e) {
  // Your code here
  Serial.println("labelchanged");
  int dispchoice = -1;
  const char* text = lv_label_get_text(ui_aiassistantlabel2);
  if (!strcmp(text, "setting")) {
    dispchoice = 2;
  } else if (!strcmp(text, "calendar")) dispchoice = 3;
  else if (!strcmp(text, "light")) dispchoice = 4;
  else if (!strcmp(text, "clock")) dispchoice = 1;


  switch (dispchoice) {
    case 0:
      dispnow = 0;
      _ui_screen_delete(&ui_Aiassistant);
      _ui_screen_change(&ui_AiChat, LV_SCR_LOAD_ANIM_FADE_ON, 200, 0, &ui_AiChat_screen_init);

      break;
    case 1:
      dispnow = 1;
      _ui_screen_delete(&ui_Aiassistant);
      _ui_screen_change(&ui_CLOCK, LV_SCR_LOAD_ANIM_FADE_ON, 200, 0, &ui_CLOCK_screen_init);
      Rtctaskcreate();

      break;
    case 2:
      dispnow = 2;
      _ui_screen_delete(&ui_Aiassistant);
      _ui_screen_change(&ui_SETTING, LV_SCR_LOAD_ANIM_FADE_ON, 200, 0, &ui_SETTING_screen_init);
      break;
    case 3:
      dispnow = 3;
      _ui_screen_delete(&ui_Aiassistant);
      _ui_screen_change(&ui_CALENDAR, LV_SCR_LOAD_ANIM_FADE_ON, 200, 0, &ui_CALENDAR_screen_init);
      break;
    case 4:
      dispnow = 4;
      _ui_screen_delete(&ui_Aiassistant);
      led_set(120);
      _ui_screen_change(&ui_LIGHT, LV_SCR_LOAD_ANIM_FADE_ON, 200, 0, &ui_LIGHT_screen_init);
      break;
    default:
      dispnow = -1;
      _ui_screen_delete(&ui_Aiassistant);
      _ui_screen_change(&ui_DESK, LV_SCR_LOAD_ANIM_FADE_ON, 0, 0, &ui_DESK_screen_init);
      break;
  }
}

void setHour0(lv_event_t* e) {
  timeset[0] = (timeset[0] == 2) ? 0 : timeset[0] + 1;
  string Hour00 = std::__cxx11::to_string(timeset[0]);
  const char* Hour0 = Hour00.c_str();
  lv_label_set_text(ui_hour0label, Hour0);
  // Your code here
}

void setHour1(lv_event_t* e) {
  timeset[1] = (timeset[1] == 4) ? 0 : timeset[1] + 1;
  string Hour01 = std::__cxx11::to_string(timeset[1]);
  const char* Hour1 = Hour01.c_str();
  lv_label_set_text(ui_hour1label, Hour1);
  // Your code here
}

void setMinu0(lv_event_t* e) {
  timeset[2] = (timeset[2] == 6) ? 0 : timeset[2] + 1;
  string Min00 = std::__cxx11::to_string(timeset[2]);
  const char* Min0 = Min00.c_str();
  lv_label_set_text(ui_min0label, Min0);
  // Your code here
}

void setMinu1(lv_event_t* e) {
  timeset[3] = (timeset[3] == 9) ? 0 : timeset[3] + 1;
  string Min01 = std::__cxx11::to_string(timeset[3]);
  const char* Min1 = Min01.c_str();
  lv_label_set_text(ui_min1label, Min1);
  // Your code here
}

void setBLight(lv_event_t* e) {
  //获取滑动条的左值
  leddut = 10 * lv_slider_get_value(ui_BLslider);
  led_set(leddut);
}

void Chatdelete() {
  chatstate = 0;
  Chattaskdelete();
}

void ChatClick(lv_event_t* e) {
  if (chatstate == 0) {
    Serial.println("chat");
    chatstate = 1;
    Serial.println("1");
    CHATsetup();


  } else {
    Serial.println("0");
    chatstate = 0;
  }
}

void setAilocal(lv_event_t* e) {
  if (Ailocalmode) {
    Ailocalmode = 0;
    lv_label_set_text(ui_aiassistantSwitchtext, "云端模型");
    lv_label_set_text(ui_aiassistantlabel2, "listening..");
  } else {
    Ailocalmode = 1;
    lv_label_set_text(ui_aiassistantSwitchtext, "本地模型");
    lv_label_set_text(ui_aiassistantlabel2, "listening...");
  }
  // Your code here
}

int flashlightval = 150;
void setlightU(lv_event_t* e) {
  flashlightval = (flashlightval == 240) ? 240 : flashlightval + 30;
  led_set(flashlightval);
  // lv_obj_set_style_shadow_spread(ui_lightcontrolL, 100 - flashlightval, LV_PART_MAIN | LV_STATE_DEFAULT);
  // lv_obj_set_style_shadow_spread(ui_lightcontrolR, 100 - flashlightval, LV_PART_MAIN | LV_STATE_DEFAULT);
  // // Your code here
}

void setlightD(lv_event_t* e) {
  flashlightval = (flashlightval == 30) ? 30 : flashlightval - 30;
  led_set(flashlightval);
  // lv_obj_set_style_shadow_spread(ui_lightcontrolL, 100 - flashlightval, LV_PART_MAIN | LV_STATE_DEFAULT);
  // lv_obj_set_style_shadow_spread(ui_lightcontrolR, 100 - flashlightval, LV_PART_MAIN | LV_STATE_DEFAULT);

  // Your code here
}
void setAssistantWebRecording(int x){
  AssistantWebRecording=x;
}
